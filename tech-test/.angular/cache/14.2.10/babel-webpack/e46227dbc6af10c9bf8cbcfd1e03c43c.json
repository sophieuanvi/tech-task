{"ast":null,"code":"import { FormControl } from \"@angular/forms\";\nimport { debounceTime, filter, finalize, distinctUntilChanged, startWith, switchMap } from \"rxjs/operators\";\nimport { TaskModalComponent } from \"./task/task-modal/task-modal.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../services/task.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/icon\";\nimport * as i7 from \"@angular/material/button\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/toolbar\";\nimport * as i10 from \"@angular/material/divider\";\nimport * as i11 from \"./task/task.component\";\n\nfunction TasksComponent_app_task_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-task\", 11);\n  }\n\n  if (rf & 2) {\n    const task_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"todo\", task_r1);\n  }\n}\n\nexport let TasksComponent = /*#__PURE__*/(() => {\n  class TasksComponent {\n    constructor(dialog, taskService) {\n      this.dialog = dialog;\n      this.taskService = taskService;\n      this.searchControl = new FormControl(\"\");\n      this.total = 0;\n    }\n\n    ngOnInit() {\n      this.getAllTasks();\n      this.taskService.taskListUpdate.subscribe(() => {\n        this.getAllTasks();\n      });\n      this.searchControl.valueChanges.pipe(debounceTime(500), startWith(\"\"), distinctUntilChanged(), switchMap(searchString => this.getAllTasks(searchString)));\n    }\n\n    getAllTasks(searchstr) {\n      this.taskService.getAllTasks(searchstr).subscribe(res => {\n        this.todos = res;\n        this.total = res.length;\n      });\n    }\n\n    addNewTask() {\n      const dialogRef = this.dialog.open(TaskModalComponent, {\n        width: \"450px\"\n      });\n      dialogRef.afterClosed().pipe(filter(response => response), finalize(() => {})).subscribe(() => {\n        this.taskService.taskListUpdate.next(true);\n      });\n    }\n\n  }\n\n  TasksComponent.ɵfac = function TasksComponent_Factory(t) {\n    return new (t || TasksComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.TaskService));\n  };\n\n  TasksComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TasksComponent,\n    selectors: [[\"app-tasks\"]],\n    decls: 23,\n    vars: 4,\n    consts: [[1, \"container\"], [1, \"large-screen-title\"], [1, \"small-screen-title\"], [\"appearance\", \"outline\", 1, \"custom-form-field\"], [\"matSuffix\", \"\"], [\"matInput\", \"\", \"type\", \"search\", \"placeholder\", \"Search task\", 3, \"formControl\"], [1, \"toolbar-spacer\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"large-button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"small-button\", 3, \"click\"], [1, \"task-container\"], [3, \"todo\", 4, \"ngFor\", \"ngForOf\"], [3, \"todo\"]],\n    template: function TasksComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-toolbar\")(2, \"mat-toolbar-row\")(3, \"span\", 1)(4, \"strong\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"span\", 2)(7, \"strong\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3)(10, \"mat-icon\", 4);\n        i0.ɵɵtext(11, \"search\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(12, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"span\", 6);\n        i0.ɵɵelementStart(14, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function TasksComponent_Template_button_click_14_listener() {\n          return ctx.addNewTask();\n        });\n        i0.ɵɵtext(15, \"Add new Task \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function TasksComponent_Template_button_click_16_listener() {\n          return ctx.addNewTask();\n        });\n        i0.ɵɵelementStart(17, \"mat-icon\");\n        i0.ɵɵtext(18, \"add\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(19, \"mat-toolbar-row\");\n        i0.ɵɵelement(20, \"mat-divider\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 9);\n        i0.ɵɵtemplate(22, TasksComponent_app_task_22_Template, 1, 1, \"app-task\", 10);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\"All Tasks (\", ctx.todos.length, \")\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Total (\", ctx.todos.length, \")\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formControl\", ctx.searchControl);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todos);\n      }\n    },\n    dependencies: [i3.NgForOf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective, i5.MatFormField, i5.MatSuffix, i6.MatIcon, i7.MatButton, i8.MatInput, i9.MatToolbar, i9.MatToolbarRow, i10.MatDivider, i11.TaskComponent],\n    styles: [\".container[_ngcontent-%COMP%]{max-width:1600px;padding:40px;margin:0 auto;display:flex;flex-direction:column}.container[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{font-family:Roboto,Helvetica Neue,sans-serif}.container[_ngcontent-%COMP%]   mat-toolbar[_ngcontent-%COMP%], .container[_ngcontent-%COMP%]   mat-toolbar-row[_ngcontent-%COMP%]{background-color:transparent;max-width:1400px;padding:0;margin:0 auto}.container[_ngcontent-%COMP%]   mat-toolbar-row[_ngcontent-%COMP%]{height:45px}.container[_ngcontent-%COMP%]   mat-divider[_ngcontent-%COMP%]{width:100%}.container[_ngcontent-%COMP%]   mat-toolbar[_ngcontent-%COMP%]:nth-child(2){margin-left:20px}.container[_ngcontent-%COMP%]   mat-grid-list[_ngcontent-%COMP%]{margin-top:20px}.container[_ngcontent-%COMP%]   mat-grid-tile[_ngcontent-%COMP%]{width:400px}.container[_ngcontent-%COMP%]   .toolbar-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.container[_ngcontent-%COMP%]   .custom-form-field[_ngcontent-%COMP%]{font-size:5px;margin-top:3px;margin-bottom:-1.25em;margin-left:50px}@media screen and (max-width: 768px){.container[_ngcontent-%COMP%]   .custom-form-field[_ngcontent-%COMP%]{margin-left:10px}}.container[_ngcontent-%COMP%]   .custom-form-field[_ngcontent-%COMP%]   input.mat-input-element[_ngcontent-%COMP%], .container[_ngcontent-%COMP%]   .custom-form-field[_ngcontent-%COMP%]   .mat-form-field-suffix[_ngcontent-%COMP%]{padding-bottom:2px;font-size:16px}.container[_ngcontent-%COMP%]   .custom-form-field[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{font-size:22px;color:#576477}.container[_ngcontent-%COMP%]   .task-container[_ngcontent-%COMP%]{justify-content:center;display:grid;grid-template-columns:repeat(auto-fill,450px);grid-auto-rows:auto;grid-gap:2rem}.container[_ngcontent-%COMP%]   .btn-wrapper[_ngcontent-%COMP%]{margin-top:30px;display:flex;justify-content:center}@media screen and (max-width: 768px){.large-button[_ngcontent-%COMP%], .large-screen-title[_ngcontent-%COMP%]{display:none}}@media screen and (min-width: 768px){.small-button[_ngcontent-%COMP%], .small-screen-title[_ngcontent-%COMP%]{display:none}}\"]\n  });\n  return TasksComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}