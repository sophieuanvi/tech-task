{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { MAT_DATE_FORMATS } from \"@angular/material/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../../../../services/task.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/cdk/text-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/datepicker\";\n\nfunction TaskModalComponent_p_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.succsessText, \" \");\n  }\n}\n\nfunction TaskModalComponent_p_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.errorText, \" \");\n  }\n}\n\nexport const MY_DATE_FORMATS = {\n  parse: {\n    dateInput: \"DD/MM/YYYY\"\n  },\n  display: {\n    dateInput: \"DD/MM/YYYY\",\n    monthYearLabel: \"MMMM YYYY\",\n    dateA11yLabel: \"LL\",\n    monthYearA11yLabel: \"MMMM YYYY\"\n  }\n};\nexport let TaskModalComponent = /*#__PURE__*/(() => {\n  class TaskModalComponent {\n    constructor(dialogRef, data, taskService) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.taskService = taskService;\n      this.reqErrorText = \"This field is required!\";\n      this.succsessText = \"Data Updated!\";\n      this.showSuccessText = false;\n      this.errorText = \"Error!\";\n      this.showErrorText = false;\n    }\n\n    ngOnInit() {\n      this.initForm();\n    }\n\n    createForm() {\n      this.taskForm = new FormGroup({\n        id: new FormControl(\"\"),\n        label: new FormControl(\"\", Validators.required),\n        category: new FormControl(\"\", Validators.required),\n        done: new FormControl(),\n        description: new FormControl(\"\", Validators.required)\n      });\n    }\n\n    initForm() {\n      this.createForm();\n\n      if (this.data.todo) {\n        this.taskForm.setValue({\n          id: this.data.todo.id,\n          label: this.data.todo.label,\n          category: this.data.todo.category,\n          done: this.data.todo.done ? new Date(\"11/11/2012\") : \"\",\n          description: this.data.todo.description\n        });\n      }\n    }\n\n    onSave() {\n      if (this.taskForm.invalid) {\n        return;\n      }\n\n      if (this.taskForm.get(\"id\").value) {\n        this.taskService.updateTask(this.taskForm.value).subscribe(res => {\n          this.showSuccessText = true;\n        }, error => {\n          this.errorText = error.message;\n          this.showErrorText = true;\n        });\n      } else {\n        let id = Math.random();\n        this.taskForm.get(\"id\").setValue(id);\n        this.taskService.createTask(this.taskForm.value).subscribe(res => {\n          this.showSuccessText = true;\n          setTimeout(() => {\n            this.dialogRef.close();\n          }, 1000);\n        }, error => {\n          this.errorText = error.message;\n          this.showErrorText = true;\n        });\n      }\n    }\n\n  }\n\n  TaskModalComponent.ɵfac = function TaskModalComponent_Factory(t) {\n    return new (t || TaskModalComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.TaskService));\n  };\n\n  TaskModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskModalComponent,\n    selectors: [[\"app-task-modal\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MAT_DATE_FORMATS,\n      useValue: MY_DATE_FORMATS\n    }])],\n    decls: 31,\n    vars: 5,\n    consts: [[3, \"formGroup\"], [\"appearance\", \"outline\", 1, \"field\"], [\"matInput\", \"\", \"formControlName\", \"label\"], [\"formControlName\", \"category\"], [\"value\", \"house\"], [\"value\", \"bureaucracy\"], [\"matInput\", \"\", \"cdkTextareaAutosize\", \"\", \"cdkAutosizeMinRows\", \"4\", \"cdkAutosizeMaxRows\", \"8\", \"formControlName\", \"description\"], [\"appearance\", \"outline\", 1, \"date\"], [\"matInput\", \"\", \"formControlName\", \"done\", 3, \"matDatepicker\"], [\"matIconSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [\"class\", \"response\", 4, \"ngIf\"], [1, \"actions\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"], [1, \"response\"]],\n    template: function TaskModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-form-field\", 1)(2, \"mat-label\");\n        i0.ɵɵtext(3, \"Label\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-form-field\", 1)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Category\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-select\", 3)(9, \"mat-option\", 4);\n        i0.ɵɵtext(10, \"House\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-option\", 5);\n        i0.ɵɵtext(12, \"Bureaucracy\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"mat-form-field\", 1)(14, \"mat-label\");\n        i0.ɵɵtext(15, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"textarea\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 7)(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(20, \"input\", 8);\n        i0.ɵɵelementStart(21, \"mat-hint\");\n        i0.ɵɵtext(22, \"Choose task Done Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"mat-datepicker-toggle\", 9)(24, \"mat-datepicker\", null, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, TaskModalComponent_p_26_Template, 2, 1, \"p\", 11);\n        i0.ɵɵtemplate(27, TaskModalComponent_p_27_Template, 2, 1, \"p\", 11);\n        i0.ɵɵelementStart(28, \"div\", 12)(29, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TaskModalComponent_Template_button_click_29_listener() {\n          return ctx.onSave();\n        });\n        i0.ɵɵtext(30, \"Save \");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(25);\n\n        i0.ɵɵproperty(\"formGroup\", ctx.taskForm);\n        i0.ɵɵadvance(20);\n        i0.ɵɵproperty(\"matDatepicker\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"for\", _r0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccessText);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showErrorText);\n      }\n    },\n    dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.MatFormField, i5.MatHint, i5.MatLabel, i6.MatButton, i7.MatSelect, i8.MatOption, i9.CdkTextareaAutosize, i10.MatInput, i11.MatDatepicker, i11.MatDatepickerInput, i11.MatDatepickerToggle],\n    styles: [\".field[_ngcontent-%COMP%]{width:400px}.actions[_ngcontent-%COMP%]{text-align:end}.response[_ngcontent-%COMP%]{margin-top:10px;text-align:center;color:#41e086}.error[_ngcontent-%COMP%]{margin-top:10px;text-align:center;color:red}\"]\n  });\n  return TaskModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}